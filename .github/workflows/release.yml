name: Release

# runs when a tag v* is pushed
# creates a release with the binaries

on:
  push:
    tags: ["v*"]

jobs:
  build: # same as main.yml
    timeout-minutes: 30
    strategy:
      fail-fast: true # abort pre-release if one build fails
      matrix:
        include:
          - os: windows-latest
            extension_out: .*\.zip
            r_cmd: Rcmd
          - os: ubuntu-latest
            extension_out: .*\.tar\.gz
            r_cmd: R CMD
          - os: macos-latest
            extension_out: .*\.tgz
            r_cmd: R CMD
    runs-on: ${{ matrix.os }}
    env:
      EXTENSION_IN: "*.tar.gz" # wildcards as used by R CMD
      EXTENSION_OUT: ${{ matrix.extension_out }} # wildcards as used by grep
      RCMD: ${{ matrix.r_cmd }}
      PKG_NAME: vscDebugger
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Setup R
      uses: r-lib/actions/setup-r@v2
    - name: Setup Pandoc
      uses: r-lib/actions/setup-pandoc@v2
    - name: Install Dependencies
      run: |
        Rscript -e "install.packages('remotes', repos = 'https://cloud.r-project.org')"
        Rscript -e "remotes::install_deps(dependencies = TRUE)"
    - name: Build Package
      run: $RCMD build .
    - name: Compile Code
      run: $RCMD INSTALL $PKG_NAME$EXTENSION_IN --build
    - name: Identify output file # can be retrieved as steps.filenames.outputs.file_out
      id: filenames
      run: echo "file_out=$(ls | grep $PKG_NAME$EXTENSION_OUT | head -1)" >> $GITHUB_OUTPUT
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.filenames.outputs.file_out }}
        path: ${{ steps.filenames.outputs.file_out }}

  release:
    name: Release
    timeout-minutes: 30
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: "artifacts/"
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT
      - name: Create release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: "artifacts/*/*"
          prerelease: false
